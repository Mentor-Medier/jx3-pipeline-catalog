apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: pact-can-i-deploy
spec:
  stepTemplate:
    env:
    - name: REQUIREMENTS_YAML
      value: "charts/something/requirements.yaml"
    - name: PACT_BROKER_BASE_URL
      value: "https://mentormedier.pactflow.io"
    - name: PACT_BROKER_TOKEN
      valueFrom:
        secretKeyRef:
          key: pactToken
          name: pactbroker
          
    - name: CONSUMER_APP
      value: consumer
    - name: PROVIDER_APP
      value: provider-manager
    - name: HOME
      value: /tekton/home
    name: ""
    resources:
      limits: {}
    workingDir: /workspace/source
  steps:
  - name: can-i-deploy
    image: 523883733847.dkr.ecr.eu-west-1.amazonaws.com/mentor-medier/pipeline-build-tools:0.0.2
    workingDir: /workspace/source
    resources: {}
    script:  |
      #!/usr/bin/env bash
      source .jx/variables.sh
        CONSUMER_VERSION=$(yq eval '.dependencies[] | select(.name=="'${CONSUMER_APP}'").version'  ${REQUIREMENTS_YAML})
      
        PROVIDER_LIST=''
        provider_array=(${PROVIDER_APP})
        for provider in ${provider_array[@]};
        do
          PROVIDER_NAME=${provider}
          PROVIDER_VERSION=$(yq eval '.dependencies[] | select(.name=="'${PROVIDER_NAME}'").version'  ${REQUIREMENTS_YAML})
          PROVIDER_LIST+="--pacticipant=${PROVIDER_NAME} --version=${PROVIDER_VERSION} "
        done
        
        if [[ -z "PROVIDER_LIST" || -z "$CONSUMER_VERSION" ]]; then
            echo "Versions not found for consumer '${CONSUMER_APP}':'$CONSUMER_VERSION' or provider(s) '${PROVIDER_LIST}' "
            exit 1
        else
            echo "Versions found: Provider(s):${PROVIDER_LIST} , Consumer:${CONSUMER_APP} : $CONSUMER_VERSION"
            /pact/bin/pact-broker can-i-deploy --pacticipant=$CONSUMER_APP --version=$CONSUMER_VERSION $PROVIDER_LIST --to-environment=production
        fi
